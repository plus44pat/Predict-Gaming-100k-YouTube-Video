{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM70lRAawKPrsiJdnqb/AsR"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"sBATdaEHceTh"},"outputs":[],"source":["#Part 8: Building Features + filling in null values.\n","\n","import pandas as pd\n","import numpy as np\n","from pytz import timezone\n","\n","#Creating df of all videos together\n","activity_df = pd.read_csv(\"C:/Users/sulli/Downloads/Youtube Folder/video_activity_channel.csv\")\n","\n","#If there were no channel views.More likely than not, it was there first video. Hence filling it in with view count\n","activity_df['Channel Views'] = activity_df['Channel Views'].fillna(activity_df['View Count'])\n","activity_df['Country'] = activity_df['Country'].fillna('US')\n","\n","# Convert boolean values to True/False\n","activity_df['Channel Made for Kids'] = activity_df['Channel Made for Kids'].astype(bool)\n","activity_df['Video Captions'] = activity_df['Video Captions'].astype(bool)\n","activity_df['Video Licensed'] = activity_df['Video Licensed'].astype(bool)\n","\n","# Convert NaN values to False\n","activity_df['Channel Made for Kids'] = activity_df['Channel Made for Kids'].fillna(False)\n","activity_df['Video Captions'] = activity_df['Video Captions'].fillna(False)\n","activity_df['Video Licensed'] = activity_df['Video Licensed'].fillna(False)\n","\n","\n","#This is from the Nov_Jan_Channel CSV\n","activity_df['Channel Published Date'] = activity_df['Channel Published Date'].fillna(activity_df['Published At'])\n","fields_to_fill = [\n","    'January Views', 'November Views', 'December Views',\n","    'January Likes', 'November Likes', 'December Likes',\n","    'January Videos', 'November Videos', 'December Videos',\n","    'Last Two Months Views', 'Last Two Months Likes', 'Last Two Months Videos',\n","    'Last Three Months Views', 'Last Three Months Likes', 'Last Three Months Videos',\n","    'Subscriber Count','Like Count'\n","]\n","\n","\n","\n","\n","# Fill all specified fields with 0\n","activity_df[fields_to_fill] = activity_df[fields_to_fill].fillna(0)\n","#I filled in the game played where I could based on a bunch of factors you will see below. If it was null, I still kept the videos\n","activity_df['Game Played Corrected'] = activity_df['Game Played']\n","activity_df['Game Played Corrected'] = activity_df['Game Played'].str.title()\n","activity_df['Game Year Corrected'] = activity_df['Game Year']\n","\n","\n","# If game exists in title or tags, fill it in.\n","\n","unique_games = activity_df['Game Played Corrected'].dropna().unique()  # Get unique non-null games\n","\n","# Function to find if any game exists in the tags\n","def find_matching_game(tags):\n","    matched_games = []\n","    for game in unique_games:\n","        if game.lower() in tags.lower():\n","            matched_games.append(game)\n","            if len(matched_games) > 1:\n","                return None  # More than one game found in tags, return None\n","    if len(matched_games) == 1:\n","        return matched_games[0]  # Return the single matched game\n","    return None  # No game found in tags, return None\n","\n","activity_df['Game Played Corrected'] = activity_df['Game Played Corrected'].str.replace('®', '')\n","activity_df['Game Played Corrected'] = activity_df['Game Played Corrected'].str.replace('Ã©', 'é')\n","activity_df['Game Played Corrected'] = activity_df['Game Played Corrected'].str.replace('GTA', 'Grand Theft Auto')\n","\n","name_mapping = {\n","    'UNO!™': 'Uno',\n","    'The Simpsons': 'The Simpsons Game',\n","    'GTA: San Andreas - Definitive': 'Grand Theft Auto: San Andreas - The Definitive Edition',\n","    'Call of Duty: Modern Warfare III': 'Call of Duty: Modern Warfare 3',\n","    'Call of Duty: Modern Warfare II': 'Call of Duty: Modern Warfare 2'\n","\n","}\n","\n","# Replace values in the 'Game Played' column using the defined mapping\n","activity_df['Game Played Corrected'] = activity_df['Game Played Corrected'].replace(name_mapping)\n","#I looked at what was empty and created this to fill in the game where I could along with what was popular and missing\n","for index, row in activity_df.iterrows():\n","    print(f\"Processing row {index}...\")\n","    if pd.isnull(row['Game Played Corrected']):  # Debug statement\n","        title_value = row['Video Title']\n","        print(f\"Title Value: {title_value}\")\n","        tags_value = row['Tags']\n","        print(f\"Tags Value: {tags_value}\")\n","        if isinstance(title_value, str):  # Check if 'Video Title' is a string\n","            print(\"Title is a string.\")\n","            title_value = title_value.title()# Apply .title() to the string\n","            title_value = title_value.str.replace('®', '')\n","            print(f\"Modified Title Value: {title_value}\")\n","            for game in unique_games:\n","                if str(game) in title_value:  # Convert game to string before checking\n","                    print(f\"Game {game} found in title.\")\n","                    activity_df.at[index, 'Game Played Corrected'] = game\n","                    print(f\"Game Played Corrected set to: {game}\")\n","                    break  # Stop searching if a match is found\n","\n","            print(f\"Title Value (lowercase) after for loop: {title_value.lower()}\")\n","            if 'madden' in title_value.lower() and '24' in title_value.lower():\n","                print(\"Performing check for 'Madden NFL 24\")\n","                print(f\"Game Played Corrected set to: {game}\")\n","                activity_df.at[index, 'Game Played Corrected'] = 'Madden NFL 24'\n","            elif 'buckshot roulette' in title_value.lower():\n","                print(\"Performing check for 'Buckshot\")\n","                activity_df.at[index, 'Game Played Corrected'] = 'Buckshot Roulette'\n","                print(f\"Game Played Corrected set to: {game}\")\n","            elif 'mw3' in title_value.lower() or 'modern warfare iii' in title_value.lower() or 'modern warfare 3' in title_value.lower():\n","                print(\"Performing check for 'mw3\")\n","                activity_df.at[index, 'Game Played Corrected'] = 'Call of Duty: Modern Warfare 3'\n","                print(f\"Game Played Corrected set to: {game}\")\n","            elif 'mw2' in title_value.lower():\n","                print(\"Performing check for 'mw2\")\n","                activity_df.at[index, 'Game Played Corrected'] = 'Call of Duty: Modern Warfare 2'\n","                print(f\"Game Played Corrected set to: {game}\")\n","            elif 'black ops 2' in title_value.lower():\n","                print(\"Performing check for 'black ops 2\")\n","                activity_df.at[index, 'Game Played Corrected'] = 'Call of Duty: Black Ops II'\n","                print(f\"Game Played Corrected set to: {game}\")\n","            elif 'black ops cold war' in title_value.lower():\n","                print(\"Performing check for 'cold war\")\n","                activity_df.at[index, 'Game Played Corrected'] = 'Call of Duty: Black Ops Cold War'\n","                print(f\"Game Played Corrected set to: {game}\")\n","            elif 'gta 5' in title_value.lower():\n","                print(\"Performing check for 'gta 5\")\n","                activity_df.at[index, 'Game Played Corrected'] = 'Grand Theft Auto V'\n","                print(f\"Game Played Corrected set to: {game}\")\n","            elif 'ww2' in title_value.lower() and 'cod' in title_value.lower():\n","                print(\"Performing check for 'wwii\")\n","                activity_df.at[index, 'Game Played Corrected'] = 'Call of Duty: WWII'\n","                print(f\"Game Played Corrected set to: {game}\")\n","            elif 'wwii' in title_value.lower() and 'cod' in title_value.lower():\n","                print(\"Performing check for 'wwii\")\n","                activity_df.at[index, 'Game Played Corrected'] = 'Call of Duty: WWII'\n","                print(f\"Game Played Corrected set to: {game}\")\n","            elif 'ww2' in title_value.lower() and 'call of' in title_value.lower():\n","                print(\"Performing check for 'wwii\")\n","                activity_df.at[index, 'Game Played Corrected'] = 'Call of Duty: WWII'\n","                print(f\"Game Played Corrected set to: {game}\")\n","            elif 'wwii' in title_value.lower() and 'call of' in title_value.lower():\n","                print(\"Performing check for 'wwii\")\n","                activity_df.at[index, 'Game Played Corrected'] = 'Call of Duty: WWII'\n","            elif 'call of' in title_value.lower() and 'mobile' in title_value.lower():\n","                print(\"Performing check for 'Call of Duty: Mobile'...\")  # New print statement\n","                activity_df.at[index, 'Game Played Corrected'] = 'Call of Duty: Mobile'\n","                print(f\"Game Played Corrected set to: Call of Duty: Mobile\")\n","            elif 'fc 24' in title_value.lower() or 'fc24' in title_value.lower():\n","                print(\"Performing check for 'fc24\")\n","                activity_df.at[index, 'Game Played Corrected'] = 'EA Sports FC 24'\n","                print(f\"Game Played Corrected set to: {game}\")\n","\n","        else:  # Check if any game from unique_games is in tags\n","            if isinstance(tags_value, str):  # Check if 'Tags' is a string\n","                tags_value = tags_value.title()  # Apply .title() to the string\n","                activity_df.at[index, 'Game Played Corrected'].fillna(find_matching_game(tags_value), inplace=True)\n","                if 'nopixel' in tags_value.lower():\n","                    activity_df.at[index, 'Game Played Corrected'] = 'Grand Theft Auto V'\n","                elif 'madden 24' in tags_value.lower():\n","                    activity_df.at[index, 'Game Played Corrected'] = 'Madden NFL 24'\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","game_year_mapping = {\n","    'Assetto Corsa': 2014,\n","    'Batman: Arkham Asylum': 2009\n","}\n","\n","# Create a new column 'Game Year' by filling null values with the mapped year and then overwriting non-null values\n","activity_df['Game Year Corrected'] = activity_df['Game Year Corrected'].fillna(activity_df['Game Year Corrected'].map(game_year_mapping))\n","\n","\n","\n","for index, row in activity_df.iterrows():\n","    if pd.isnull(row['Game Year Corrected']):\n","        game_name = row['Game Played Corrected']\n","        # Check if any other row with the same game name has a non-null value for 'Game Year Corrected'\n","        other_rows = activity_df[(activity_df['Game Played Corrected'] == game_name) & (~activity_df['Game Year Corrected'].isnull())]\n","        if not other_rows.empty:\n","            # Get the first non-null value for 'Game Year Corrected' from the other rows\n","            year = other_rows.iloc[0]['Game Year Corrected']\n","            # Fill the null value with the year\n","            activity_df.at[index, 'Game Year Corrected'] = year\n","\n","\n","\n","\n","\n","# Calculate percentiles across all videos\n","activity_df['View Count Percentile'] = activity_df['View Count'].rank(pct=True)\n","activity_df.drop(columns=['YT Rating'], inplace=True)\n","activity_df.drop(columns=['Self Declared Made For Kids'], inplace=True)\n","\n","# Define the keywords to search for\n","keywords = ['gta', 'mario', 'sonic', 'pokemon', 'fortnite', 'roblox', 'warzone', 'fnf', 'tekken',\n","            'call of duty', 'mw3', 'madden', 'grand theft auto', 'friday night funkin', 'minecraft']\n","\n","# Convert keywords to lowercase for case insensitivity\n","keywords = [keyword.lower() for keyword in keywords]\n","\n","def contains_top_search_term(row):\n","    title_text = str(row['Video Title']).lower()\n","    game_listed_text = str(row['Game Played Corrected']).lower()\n","    description_text = str(row['Video Description']).lower()\n","    tags_text = str(row['Tags']).lower()\n","\n","    # Initialize variables to store the presence of top search terms in different fields\n","    in_title = any(keyword in title_text for keyword in keywords)\n","    in_game_listed = any(keyword in game_listed_text for keyword in keywords)\n","    in_description = any(keyword in description_text for keyword in keywords)\n","    in_tags = any(keyword in tags_text for keyword in keywords)\n","\n","    # Return 'Yes' if the top search term is present in the corresponding field, otherwise return 'No'\n","    return 1 if in_title else 0, 1 if in_game_listed else 0, \\\n","           1 if in_description else 0, 1 if in_tags else 0\n","\n","# Apply the function row-wise to create the new columns. A top search term was based on youtube trends from January 29th to Feb 5th (https://trends.google.com/trends/)\n","activity_df['Top Search Term in Title'], activity_df['Top Search Term in Game Listed'], \\\n","activity_df['Top Search Term in Description'], activity_df['Top Search Term in Tags'] = zip(\n","    *activity_df.apply(contains_top_search_term, axis=1))\n","\n","# Define the keywords for YouTube Search Rising Words\n","youtube_rising_keywords = ['Youtube Search Rising', 'sonic x shadow generations', 'buckshot roulette',\n","                           'prince of persia the lost crown', 'anita max wynn', 'mat pat', 'arcane season 2',\n","                           'hazbin hotel', 'anime world tower defense', 'swag surfin', 'sic bo',\n","                           'poppy playtime chapter 3 full game', 'wacky world', 'valorant', 'poppy playtime',\n","                           'rowdy racks', 'moneymaker', 'sonic prime', 'Palworld', 'BUCKSHOT ROULETTE',\n","                           'Caylus', 'Tetris', 'Resident Evil 2', 'Lil RT', 'Monster Hunter: World',\n","                           'Final Fantasy VII Remake', 'Shadow the Hedgehog', 'Final Fantasy XIV',\n","                           'Rainbow Six', 'Elden Ring']\n","\n","# Convert keywords to lowercase for case insensitivity\n","youtube_rising_keywords = [keyword.lower() for keyword in youtube_rising_keywords]\n","\n","# Function to check if any keyword is present in the text\n","def contains_youtube_rising_words(row):\n","    title_text = str(row['Video Title']).lower()\n","    game_listed_text = str(row['Game Played Corrected']).lower()\n","    description_text = str(row['Video Description']).lower()\n","    tags_text = str(row['Tags']).lower()\n","\n","    # Initialize variables to store the presence of YouTube rising words in different fields\n","    in_title = any(keyword in title_text for keyword in youtube_rising_keywords)\n","    in_game_listed = any(keyword in game_listed_text for keyword in youtube_rising_keywords)\n","    in_description = any(keyword in description_text for keyword in youtube_rising_keywords)\n","    in_tags = any(keyword in tags_text for keyword in youtube_rising_keywords)\n","\n","    # Return 'Yes' if the YouTube rising word is present in the corresponding field, otherwise return 'No'\n","    return 1 if in_title else 0, 1 if in_game_listed else 0, 1 if in_description else 0, 1 if in_tags else 0\n","\n","# Apply the function row-wise to create the new columns\n","activity_df['YouTube Rising Word in Title'], activity_df['YouTube Rising Word in Game Listed'], \\\n","activity_df['YouTube Rising Word in Description'], activity_df['YouTube Rising Word in Tags'] = zip(\n","    *activity_df.apply(contains_youtube_rising_words, axis=1))\n","\n","# Define the list of top selling games. I looked at sales during this time period to determine if it was top selling. I used January 15th-feb 15th to understand what games should be listed here (https://steamdb.info/)\n","top_selling_steam_games = [\n","    'Palworld',\n","    'Granblue Fantasy: Relink',\n","    'Persona 3 Reload',\n","    'Enshrouded',\n","    'Counter-Strike 2',\n","    'Steam Deck',\n","    'TEKKEN 8',\n","    'NARAKA: BLADEPOINT',\n","    'PUBG: BATTLEGROUNDS',\n","    'Suicide Squad: Kill the Justice League',\n","    'Like a Dragon: Infinite Wealth',\n","    'EA Sports FC 24',\n","    'Apex Legends',\n","    'Call of Duty',\n","    'HELLDIVERS 2',\n","    'Dota 2',\n","    'Warframe',\n","    'Lethal Company',\n","    \"Baldur's Gate 3\",\n","    'HELLDIVERS 2'\n","]\n","\n","# Convert each game name to title case\n","top_selling_steam_game = [game.title() for game in top_selling_steam_games]\n","\n","# Label games as top selling if they appear in the list\n","activity_df['Top Selling Steam Game'] = np.where(activity_df['Game Played Corrected'].isin(top_selling_steam_game),\n","                                           1, 0)\n","#Used the following website to detrmine if it was top selling: https://www.gamespot.com/gallery/2024s-best-selling-games-in-the-us/2900-5106/\n","top_selling_games_2024 = [\n","    'God of War Ragnarok',\n","    'Jujutsu Kaisen: Cursed Clash',\n","    'Mario Kart 8',\n","    'Minecraft',\n","    'Gran Turismo 7',\n","    'Mortal Kombat 1',\n","    'Elden Ring',\n","    'Prince of Persia - The Lost Crown',\n","    'Avatar Frontiers of Pandora',\n","    'Super Mario Bros. Wonder',\n","    \"Marvel's Spider-Man 2\",\n","    'The Last of Us Part II',\n","    'EA Sports FC 24',\n","    'Like A Dragon Infinite Wealth',\n","    'Hogwarts Legacy',\n","    'Madden NFL 24',\n","    'Persona 3 Reload',\n","    'Suicide Squad Kill the Justice League',\n","    'Tekken 8',\n","    'Call of Duty Modern Warfare 3'\n","]\n","\n","# Convert each game name to title case\n","top_selling_2024_game = [game.title() for game in top_selling_games_2024]\n","\n","# Label games as top selling of 2024 if they appear in the list\n","activity_df['Top Selling Game 2024'] = np.where(activity_df['Game Played Corrected'].str.title().isin(top_selling_2024_game),\n","                                                1, 0)\n","#Creating my target variable\n","activity_df['Views'] = np.where(activity_df['View Count'] >= 100000, 1, 0)\n","\n","activity_df['Views'] = activity_df['Views'].astype(int)\n","\n","#Made it an average amount of views because I thought this was important. Did various time periods to see if I got different results\n","activity_df['Avg Views Last 3 Months'] = np.where(activity_df['Last Three Months Videos'] != 0,\n","                                                  activity_df['Last Three Months Views'] / activity_df['Last Three Months Videos'],\n","                                                  0)\n","\n","activity_df['Avg Views Last 2 Months'] = np.where(activity_df['Last Two Months Videos'] != 0,\n","                                                  activity_df['Last Two Months Views'] / activity_df['Last Two Months Videos'],\n","                                                  0)\n","activity_df['Avg Views Last 1 Month'] = np.where(activity_df['January Videos'] != 0,\n","                                                  activity_df['January Views'] / activity_df['January Videos'],\n","                                                  0)\n","\n","\n","\n","# Convert boolean columns to integer values (0 for False, 1 for True)\n","activity_df['Channel Made for Kids'] = activity_df['Channel Made for Kids'].astype(int)\n","activity_df['Made For Kids'] = activity_df['Made For Kids'].astype(int)\n","activity_df['Video Captions'] = activity_df['Video Captions'].astype(int)\n","activity_df['Video Licensed'] = activity_df['Video Licensed'].astype(int)\n","activity_df['Top Search Term in Title'] = (activity_df['Top Search Term in Title'] == 'Yes').astype(int)\n","activity_df['Top Search Term in Game Listed'] = (activity_df['Top Search Term in Game Listed'] == 'Yes').astype(int)\n","activity_df['Top Search Term in Description'] = (activity_df['Top Search Term in Description'] == 'Yes').astype(int)\n","activity_df['Top Search Term in Tags'] = (activity_df['Top Search Term in Tags'] == 'Yes').astype(int)\n","activity_df['YouTube Rising Word in Title'] = (activity_df['YouTube Rising Word in Title'] == 'Yes').astype(int)\n","activity_df['YouTube Rising Word in Game Listed'] = (activity_df['YouTube Rising Word in Game Listed'] == 'Yes').astype(int)\n","activity_df['YouTube Rising Word in Description'] = (activity_df['YouTube Rising Word in Description'] == 'Yes').astype(int)\n","activity_df['YouTube Rising Word in Tags'] = (activity_df['YouTube Rising Word in Tags'] == 'Yes').astype(int)\n","# Replace non-finite values with a default value (e.g., 0)\n","activity_df['Game Year Corrected'] = activity_df['Game Year Corrected'].fillna(0)\n","\n","# Convert the column to integers\n","activity_df['Game Year Corrected'] = activity_df['Game Year Corrected'].astype(int)\n","\n","\n","#I saw Likes as an important metric and wanted to see viewer engagement on past videos\n","activity_df['Avg Likes Last 3 Months'] = np.where(activity_df['Last Three Months Videos'] != 0,\n","                                                  activity_df['Last Three Months Likes'] / activity_df['Last Three Months Videos'],\n","                                                  0)\n","\n","activity_df['Avg Likes Last 2 Months'] = np.where(activity_df['Last Two Months Videos'] != 0,\n","                                                  activity_df['Last Two Months Likes'] / activity_df['Last Two Months Videos'],\n","                                                  0)\n","activity_df['Avg Likes Last 1 Month'] = np.where(activity_df['January Videos'] != 0,\n","                                                  activity_df['January Views'] / activity_df['January Videos'],\n","                                                  0)\n","#The amount of likes compared to the amount of views let you know if people liked watching the video\n","activity_df['Likes to Views Ratio'] = np.where(activity_df['View Count'] != 0,\n","                                                  activity_df['Like Count'] / activity_df['View Count'],\n","                                                  0)\n","\n","activity_df['Likes to Views Ratio Last 3 Month'] = np.where(activity_df['Last Three Months Views'] != 0,\n","                                                  activity_df['Last Three Months Likes'] / activity_df['Last Three Months Views'],\n","                                                  0)\n","activity_df['Likes to Views Ratio Last 2 Month'] = np.where(activity_df['Last Two Months Views'] != 0,\n","                                                  activity_df['Last Two Months Likes'] / activity_df['Last Two Months Views'],\n","                                                  0)\n","activity_df['Likes to Views Ratio Last 1 Month'] = np.where(activity_df['January Views'] != 0,\n","                                                  activity_df['January Likes'] / activity_df['January Views'],\n","                                                  0)\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","# Define the known date formats\n","date_formats = ['%Y-%m-%dT%H:%M:%S.%fZ', '%Y-%m-%dT%H:%M:%SZ']\n","\n","# Custom function to parse dates\n","def parse_channel_date(date_str):\n","    for fmt in date_formats:\n","        try:\n","            return pd.to_datetime(date_str, format=fmt)\n","        except ValueError:\n","            continue  # Try the next format\n","    return pd.NaT  # Return NaT if no format matches\n","\n","# Apply the custom function to parse dates in the 'Channel Published Date' column\n","activity_df['New Channel Published Date'] = activity_df['Channel Published Date'].apply(parse_channel_date)\n","\n","# Convert 'Published At' column to datetime format\n","activity_df['Published At'] = pd.to_datetime(activity_df['Published At'])\n","\n","# Convert the parsed dates to Eastern Time Zone (ET)\n","activity_df['New Channel Published Date'] = activity_df['New Channel Published Date'].dt.tz_localize('UTC').dt.tz_convert('US/Eastern')\n","\n","# Calculate the channel age\n","activity_df['Channel Age'] = (activity_df['Published At'] - activity_df['New Channel Published Date']).dt.days.clip(lower=0)\n","\n","# Extract the hour of the day\n","activity_df['Hour'] = activity_df['Published At'].dt.hour\n","\n","# Define bins and labels for time categories\n","bins = [-1, 4, 8, 12, 16, 20, 24]\n","labels = ['Very Early Morning', 'Early Morning', 'Morning', 'Afternoon', 'Evening', 'Night']\n","\n","# Categorize the time of day\n","activity_df['Time of Day'] = pd.cut(activity_df['Hour'], bins=bins, labels=labels, right=False)\n","\n","# Extract the day of the week in US/Eastern time zone\n","activity_df['Day of Week'] = activity_df['Published At'].dt.tz_convert('US/Eastern').dt.day_name()\n","\n","day_of_week_mapping = {\n","    'Sunday': 1,\n","    'Monday': 2,\n","    'Tuesday': 3,\n","    'Wednesday': 4,\n","    'Thursday': 5,\n","    'Friday': 6,\n","    'Saturday': 7\n","}\n","\n","time_of_day_mapping = {\n","    'Very Early Morning': 1,\n","    'Early Morning': 2,\n","    'Morning': 3,\n","    'Afternoon': 4,\n","    'Evening': 5,\n","    'Night': 6\n","}\n","\n","# Define conditions and choices for np.select()\n","conditions = [\n","    (activity_df['Stream Start Time'].notnull()) & (activity_df['duration_seconds'] < 60*60),\n","    (activity_df['Stream Start Time'].notnull()) & (activity_df['duration_seconds'] >= 60*60)\n","]\n","choices = ['Premiering Function Used', 'Stream']\n","\n","# Apply np.select() to create the 'Premiering Function Used' category.\n","#Created this because a video could be a stream, using the premier function (https://support.google.com/youtube/answer/9080341?hl=en#:~:text=YouTube%20Premieres%20lets%20you%20and,%2C%20chat%2C%20and%20leave%20comments.), or none of the above\n","activity_df['Premier Stream or Video'] = np.select(conditions, choices, default='Video')\n","\n","\n","#Encoing object categorical variables as numbers\n","unique_video_definitions = activity_df['Video Definition'].unique()\n","unique_video_projections = activity_df['Video Projection'].unique()\n","unique_video_dimensions = activity_df['Video Dimension'].unique()\n","unique_games_played_corrected = activity_df['Game Played Corrected'].unique()\n","unique_game_years_corrected = activity_df['Game Year Corrected'].unique()\n","unique_countries = activity_df['Country'].unique()\n","unique_video_licensed = activity_df['Video Licensed']\n","unique_premier_function_used = activity_df['Premier Stream or Video'].unique()\n","\n","# Create mappings for unique values\n","video_definition_mapping = {value: index for index, value in enumerate(unique_video_definitions)}\n","video_projection_mapping = {value: index for index, value in enumerate(unique_video_projections)}\n","video_dimension_mapping = {value: index for index, value in enumerate(unique_video_dimensions)}\n","game_played_corrected_mapping = {value: index for index, value in enumerate(unique_games_played_corrected)}\n","country_mapping = {value: index for index, value in enumerate(unique_countries)}\n","video_licensed_mapping = {value: index for index, value in enumerate(unique_video_licensed)}\n","premier_stream_video_mapping = {value: index for index, value in enumerate(unique_premier_function_used)}\n","\n","# Map categorical variables to numerical labels and store them back into the table\n","activity_df['Video Definition Code'] = activity_df['Video Definition'].map(video_definition_mapping)\n","activity_df['Video Projection Code'] = activity_df['Video Projection'].map(video_projection_mapping)\n","activity_df['Video Dimension Code'] = activity_df['Video Dimension'].map(video_dimension_mapping)\n","activity_df['Game Played Corrected Code'] = activity_df['Game Played Corrected'].map(game_played_corrected_mapping)\n","activity_df['Country Code'] = activity_df['Country'].map(country_mapping) #To be clear, this is the Channel Country\n","activity_df['Day of Week Code'] = activity_df['Day of Week'].map(day_of_week_mapping)\n","activity_df['Time of Day Code'] = activity_df['Time of Day'].map(time_of_day_mapping).astype(int)\n","activity_df['Video Licensed Code'] = activity_df['Video Licensed'].map(video_licensed_mapping)\n","activity_df['Premier Stream Video Code'] = activity_df['Premier Stream or Video'].map(premier_stream_video_mapping)\n","\n","\n","\n","\n","# Convert 'Video Description' column to lowercase and then check if it contains the word 'twitch'\n","activity_df['Links Twitch'] = activity_df['Video Description'].str.lower().str.contains('twitch\\.tv', na=False).astype(int)\n","activity_df['Links Instagram'] = activity_df['Video Description'].str.lower().str.contains('instagram\\.com', na=False).astype(int)\n","activity_df['Links Twitter'] = activity_df['Video Description'].str.lower().str.contains('twitter\\.com|x\\.com', na=False).astype(int)\n","activity_df['Links Facebook'] = activity_df['Video Description'].str.lower().str.contains('facebook\\.com', na=False).astype(int)\n","\n","\n","#Wanted to know if people promoted themselves, would it help the video\n","activity_df['Primary Social Media Link'] = ((activity_df['Links Twitch'] == 1) |\n","                                    (activity_df['Links Instagram'] == 1) |\n","                                    (activity_df['Links Twitter'] == 1) |\n","                                           (activity_df['Links Facebook'] == 1 )).astype(int)\n","\n","# Ensure that the entire column is properly cast to integer type\n","activity_df['Primary Social Media Link'] = activity_df['Primary Social Media Link'].astype(int)\n","\n","# Does the video have tags\n","activity_df['Tags Exist'] = activity_df['Tags'].notnull().astype(int)\n","\n","# Does the video have a Description\n","activity_df['Description Exist'] = activity_df['Video Description'].notnull().astype(int)\n","\n","# Does the video have a Game Listed\n","activity_df['Game Played Listed in Activity'] = activity_df['Game Played'].notnull().astype(int)\n","\n","#Amount of Tags\n","def count_tags(tags):\n","    if pd.isnull(tags):\n","        return 0\n","    else:\n","        return tags.count(',') + 1\n","\n","# Apply the function to the 'Tags' column\n","activity_df['Amount of Tags'] = activity_df['Tags'].apply(count_tags)\n","\n","\n","activity_df.to_csv(\"C:/Users/sulli/Downloads/Youtube Folder/video_activity_channel_altered.csv\",index=False)\n","\n","print(activity_df.info())\n"]}]}